#!/bin/bash
# Git Pre-Commit Hook
# Version: 1.0.0
# Verifica calidad de código antes de commit

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Config
HOOK_LEVEL="${HOOK_LEVEL:-normal}"  # strict, normal, loose
RUN_PHPSTAN="${RUN_PHPSTAN:-true}"
RUN_PHPCS="${RUN_PHPCS:-true}"
PHPSTAN_LEVEL="${PHPSTAN_LEVEL:-8}"

# Check if hooks are disabled
if [ -f .git/hooks/disabled ]; then
    echo -e "${YELLOW}⚠️  Git hooks disabled${NC}"
    exit 0
fi

echo -e "${BLUE}════════════════════════════════════════${NC}"
echo -e "${BLUE}  Pre-Commit Quality Checks${NC}"
echo -e "${BLUE}════════════════════════════════════════${NC}"
echo ""

# Get list of PHP files to check
PHP_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.php$' || true)

if [ -z "$PHP_FILES" ]; then
    echo -e "${GREEN}✅ No PHP files to check${NC}"
    exit 0
fi

echo "Files to check:"
echo "$PHP_FILES" | sed 's/^/  - /'
echo ""

# Counter
ERRORS=0

# ============================================
# 1. PHP Lint (Syntax Check)
# ============================================
echo -e "${BLUE}1. PHP Syntax Check...${NC}"
for file in $PHP_FILES; do
    php -l "$file" > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo -e "${RED}❌ Syntax error in: $file${NC}"
        php -l "$file"
        ERRORS=$((ERRORS + 1))
    fi
done

if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}   ✅ All files have valid syntax${NC}"
else
    echo -e "${RED}   ❌ Found $ERRORS syntax errors${NC}"
    echo ""
    echo "Fix syntax errors before committing."
    exit 1
fi
echo ""

# ============================================
# 2. PHP_CodeSniffer (PSR-12)
# ============================================
if [ "$RUN_PHPCS" = "true" ] && [ "$HOOK_LEVEL" != "loose" ]; then
    echo -e "${BLUE}2. PSR-12 Code Style Check...${NC}"

    if [ ! -f vendor/bin/phpcs ]; then
        echo -e "${YELLOW}   ⚠️  phpcs not found, skipping${NC}"
    else
        echo "$PHP_FILES" | xargs vendor/bin/phpcs --standard=PSR12 --report=summary 2>&1 | tee /tmp/phpcs-output.txt

        if [ ${PIPESTATUS[1]} -ne 0 ]; then
            echo -e "${RED}   ❌ Code style violations found${NC}"
            echo ""
            echo "You can auto-fix most issues with:"
            echo "  vendor/bin/phpcbf --standard=PSR12 <file>"
            echo ""

            if [ "$HOOK_LEVEL" = "strict" ]; then
                echo "Fix code style before committing (strict mode)."
                exit 1
            else
                echo -e "${YELLOW}   ⚠️  Continuing with warnings (normal mode)${NC}"
            fi
        else
            echo -e "${GREEN}   ✅ Code style is compliant${NC}"
        fi
    fi
    echo ""
fi

# ============================================
# 3. PHPStan (Static Analysis)
# ============================================
if [ "$RUN_PHPSTAN" = "true" ] && [ "$HOOK_LEVEL" != "loose" ]; then
    echo -e "${BLUE}3. Static Analysis (PHPStan level $PHPSTAN_LEVEL)...${NC}"

    if [ ! -f vendor/bin/phpstan ]; then
        echo -e "${YELLOW}   ⚠️  PHPStan not found, skipping${NC}"
    else
        # Only analyze changed files
        TEMP_FILE=$(mktemp)
        echo "$PHP_FILES" > "$TEMP_FILE"

        vendor/bin/phpstan analyse --level=$PHPSTAN_LEVEL --no-progress $(cat "$TEMP_FILE") 2>&1 | tee /tmp/phpstan-output.txt
        PHPSTAN_RESULT=${PIPESTATUS[0]}

        rm "$TEMP_FILE"

        if [ $PHPSTAN_RESULT -ne 0 ]; then
            echo -e "${RED}   ❌ Static analysis errors found${NC}"

            if [ "$HOOK_LEVEL" = "strict" ]; then
                echo "Fix static analysis errors before committing."
                exit 1
            else
                echo -e "${YELLOW}   ⚠️  Continuing with warnings (normal mode)${NC}"
            fi
        else
            echo -e "${GREEN}   ✅ No static analysis errors${NC}"
        fi
    fi
    echo ""
fi

# ============================================
# 4. Debug Code Check
# ============================================
echo -e "${BLUE}4. Debug Code Check...${NC}"
DEBUG_FOUND=0

for file in $PHP_FILES; do
    # Check for var_dump, dd, print_r (PHP)
    if grep -n -E '(var_dump|dd\(|print_r)\(' "$file"; then
        echo -e "${RED}   ❌ Found debug code in: $file${NC}"
        DEBUG_FOUND=1
    fi

    # Check for console.log, debugger (JS in PHP files)
    if grep -n -E '(console\.log|debugger)' "$file"; then
        echo -e "${RED}   ❌ Found console.log/debugger in: $file${NC}"
        DEBUG_FOUND=1
    fi
done

if [ $DEBUG_FOUND -eq 1 ]; then
    echo -e "${RED}   ❌ Remove debug code before committing${NC}"

    if [ "$HOOK_LEVEL" = "strict" ]; then
        exit 1
    else
        echo -e "${YELLOW}   ⚠️  Continuing with warnings (normal mode)${NC}"
    fi
else
    echo -e "${GREEN}   ✅ No debug code found${NC}"
fi
echo ""

# ============================================
# 5. Secrets Check
# ============================================
echo -e "${BLUE}5. Secrets & Sensitive Files Check...${NC}"

SENSITIVE_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '(\.env$|\.key$|credentials|secrets|password|\.pem$)' || true)

if [ ! -z "$SENSITIVE_FILES" ]; then
    echo -e "${RED}   ❌ Attempting to commit sensitive files:${NC}"
    echo "$SENSITIVE_FILES" | sed 's/^/      /'
    echo ""
    echo "These files should NOT be committed:"
    echo "  - .env files (use .env.example instead)"
    echo "  - .key files"
    echo "  - credentials files"
    echo "  - .pem files"
    echo ""
    echo "Add them to .gitignore if not already there."
    exit 1
else
    echo -e "${GREEN}   ✅ No sensitive files detected${NC}"
fi
echo ""

# ============================================
# 6. TODO Comments Warning
# ============================================
if [ "$HOOK_LEVEL" = "strict" ]; then
    echo -e "${BLUE}6. TODO Comments Check...${NC}"
    TODO_FOUND=0

    for file in $PHP_FILES; do
        if grep -n 'TODO\|FIXME\|HACK\|XXX' "$file"; then
            TODO_FOUND=1
        fi
    done

    if [ $TODO_FOUND -eq 1 ]; then
        echo -e "${YELLOW}   ⚠️  Found TODO/FIXME comments${NC}"
        echo "   Consider completing these before committing."
        echo ""
    else
        echo -e "${GREEN}   ✅ No TODO comments found${NC}"
        echo ""
    fi
fi

# ============================================
# 7. File Size Check
# ============================================
echo -e "${BLUE}7. Large Files Check...${NC}"
LARGE_FILES=0

for file in $PHP_FILES; do
    FILE_SIZE=$(wc -c < "$file")
    if [ $FILE_SIZE -gt 5000000 ]; then  # 5MB
        echo -e "${RED}   ❌ Large file detected: $file ($(($FILE_SIZE / 1024))KB)${NC}"
        LARGE_FILES=1
    fi
done

if [ $LARGE_FILES -eq 1 ]; then
    echo -e "${YELLOW}   ⚠️  Consider if these files should be in Git${NC}"
else
    echo -e "${GREEN}   ✅ No large files detected${NC}"
fi
echo ""

# ============================================
# Summary
# ============================================
echo -e "${BLUE}════════════════════════════════════════${NC}"
echo -e "${GREEN}✅ All checks passed!${NC}"
echo -e "${BLUE}════════════════════════════════════════${NC}"
echo ""
echo "Proceeding with commit..."
echo ""

exit 0
