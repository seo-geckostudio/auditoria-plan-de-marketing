#!/bin/bash
# Git Commit-Msg Hook
# Version: 1.0.0
# Valida formato de mensajes de commit

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Check if hooks are disabled
if [ -f .git/hooks/disabled ]; then
    exit 0
fi

COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Skip merge commits
if echo "$COMMIT_MSG" | grep -q "^Merge"; then
    exit 0
fi

# Skip revert commits
if echo "$COMMIT_MSG" | grep -q "^Revert"; then
    exit 0
fi

# Valid commit types
VALID_TYPES="feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert"

# Check format: tipo: descripción
if ! echo "$COMMIT_MSG" | grep -qE "^($VALID_TYPES): .+"; then
    echo -e "${RED}════════════════════════════════════════${NC}"
    echo -e "${RED}❌ Invalid commit message format${NC}"
    echo -e "${RED}════════════════════════════════════════${NC}"
    echo ""
    echo "Current message:"
    echo "  $COMMIT_MSG"
    echo ""
    echo "Required format:"
    echo "  tipo: descripción breve"
    echo ""
    echo "Valid types:"
    echo "  - feat:     Nueva funcionalidad"
    echo "  - fix:      Corrección de bug"
    echo "  - docs:     Cambios en documentación"
    echo "  - style:    Formato, punto y coma, etc (no afectan código)"
    echo "  - refactor: Refactorización de código"
    echo "  - test:     Añadir o modificar tests"
    echo "  - chore:    Tareas de mantenimiento"
    echo "  - perf:     Mejoras de rendimiento"
    echo "  - ci:       Cambios en CI/CD"
    echo "  - build:    Cambios en build o dependencias"
    echo "  - revert:   Revertir commit previo"
    echo ""
    echo "Examples:"
    echo "  ✅ feat: añadir autenticación con OAuth 2.0"
    echo "  ✅ fix: corregir SQL injection en ClienteService"
    echo "  ✅ docs: actualizar README con instrucciones de deploy"
    echo "  ✅ refactor: extraer lógica de validación a clase separada"
    echo ""
    echo "❌ cambios"
    echo "❌ feature: nueva cosa"
    echo "❌ arreglado bug"
    echo ""
    exit 1
fi

# Extract type and description
TYPE=$(echo "$COMMIT_MSG" | cut -d: -f1)
DESCRIPTION=$(echo "$COMMIT_MSG" | cut -d: -f2- | sed 's/^ *//')

# Check description length (min 10 chars)
if [ ${#DESCRIPTION} -lt 10 ]; then
    echo -e "${RED}════════════════════════════════════════${NC}"
    echo -e "${RED}❌ Commit description too short${NC}"
    echo -e "${RED}════════════════════════════════════════${NC}"
    echo ""
    echo "Description: $DESCRIPTION"
    echo ""
    echo "Provide a meaningful description (min 10 characters)."
    echo ""
    echo "Example:"
    echo "  ✅ $TYPE: implementar validación de email en formulario de registro"
    echo ""
    exit 1
fi

# Check description doesn't start with uppercase (Spanish convention)
if echo "$DESCRIPTION" | grep -qE "^[A-ZÁÉÍÓÚÑ]"; then
    echo -e "${YELLOW}════════════════════════════════════════${NC}"
    echo -e "${YELLOW}⚠️  Commit description starts with uppercase${NC}"
    echo -e "${YELLOW}════════════════════════════════════════${NC}"
    echo ""
    echo "Recommendation: Use lowercase for consistency"
    echo ""
    echo "Current:      $TYPE: $DESCRIPTION"
    echo "Recommended:  $TYPE: $(echo $DESCRIPTION | awk '{print tolower(substr($0,1,1)) substr($0,2)}')"
    echo ""
    echo "Continuing anyway..."
    echo ""
fi

# Check for period at the end (not recommended)
if echo "$DESCRIPTION" | grep -qE "\.$"; then
    echo -e "${YELLOW}⚠️  Commit description ends with period (not recommended)${NC}"
fi

# Success
echo -e "${GREEN}✅ Commit message format is valid${NC}"
exit 0
