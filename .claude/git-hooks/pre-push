#!/bin/bash
# Git Pre-Push Hook
# Version: 1.0.0
# Ejecuta tests antes de push

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Config
REQUIRE_TESTS="${REQUIRE_TESTS:-true}"
MIN_COVERAGE="${MIN_COVERAGE:-70}"
HOOK_LEVEL="${HOOK_LEVEL:-normal}"

# Check if hooks are disabled
if [ -f .git/hooks/disabled ]; then
    echo -e "${YELLOW}⚠️  Git hooks disabled${NC}"
    exit 0
fi

echo -e "${BLUE}════════════════════════════════════════${NC}"
echo -e "${BLUE}  Pre-Push Validation${NC}"
echo -e "${BLUE}════════════════════════════════════════${NC}"
echo ""

# Get current branch
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
echo "Branch: $CURRENT_BRANCH"
echo ""

# ============================================
# 1. Protected Branch Check
# ============================================
if [ "$CURRENT_BRANCH" = "main" ] || [ "$CURRENT_BRANCH" = "master" ]; then
    echo -e "${RED}⚠️  WARNING: Pushing to protected branch: $CURRENT_BRANCH${NC}"
    echo ""
    echo "Are you sure you want to push to $CURRENT_BRANCH? (y/N)"
    read -r response

    if [ "$response" != "y" ] && [ "$response" != "Y" ]; then
        echo "Push cancelled."
        exit 1
    fi
    echo ""
fi

# ============================================
# 2. Run Tests
# ============================================
if [ "$REQUIRE_TESTS" = "true" ]; then
    echo -e "${BLUE}1. Running Test Suite...${NC}"

    if [ ! -f vendor/bin/phpunit ]; then
        echo -e "${YELLOW}   ⚠️  PHPUnit not found, skipping tests${NC}"
    else
        # Run tests
        vendor/bin/phpunit --testdox 2>&1 | tee /tmp/phpunit-output.txt
        TEST_RESULT=${PIPESTATUS[0]}

        if [ $TEST_RESULT -ne 0 ]; then
            echo ""
            echo -e "${RED}════════════════════════════════════════${NC}"
            echo -e "${RED}❌ Tests failed!${NC}"
            echo -e "${RED}════════════════════════════════════════${NC}"
            echo ""
            echo "Fix failing tests before pushing."
            echo ""
            echo "To see detailed output:"
            echo "  vendor/bin/phpunit --verbose"
            echo ""
            echo "To run specific test:"
            echo "  vendor/bin/phpunit path/to/TestFile.php"
            echo ""
            exit 1
        fi

        echo -e "${GREEN}   ✅ All tests passed${NC}"
    fi
    echo ""
fi

# ============================================
# 3. Code Coverage Check
# ============================================
if [ "$REQUIRE_TESTS" = "true" ] && [ "$HOOK_LEVEL" = "strict" ]; then
    echo -e "${BLUE}2. Code Coverage Check (minimum $MIN_COVERAGE%)...${NC}"

    if [ ! -f vendor/bin/phpunit ]; then
        echo -e "${YELLOW}   ⚠️  PHPUnit not found, skipping coverage${NC}"
    else
        # Run with coverage
        vendor/bin/phpunit --coverage-text --coverage-html coverage/ > /tmp/coverage-output.txt 2>&1
        COVERAGE_RESULT=${PIPESTATUS[0]}

        if [ $COVERAGE_RESULT -eq 0 ]; then
            # Extract coverage percentage
            COVERAGE=$(grep "Lines:" /tmp/coverage-output.txt | awk '{print $2}' | sed 's/%//' | head -1)

            if [ ! -z "$COVERAGE" ]; then
                echo "   Current coverage: $COVERAGE%"

                if (( $(echo "$COVERAGE < $MIN_COVERAGE" | bc -l) )); then
                    echo -e "${RED}   ❌ Coverage below minimum: $COVERAGE% < $MIN_COVERAGE%${NC}"
                    echo ""
                    echo "Increase test coverage before pushing."
                    exit 1
                else
                    echo -e "${GREEN}   ✅ Coverage meets minimum: $COVERAGE% >= $MIN_COVERAGE%${NC}"
                fi
            else
                echo -e "${YELLOW}   ⚠️  Could not determine coverage${NC}"
            fi
        else
            echo -e "${YELLOW}   ⚠️  Coverage check failed${NC}"
        fi
    fi
    echo ""
fi

# ============================================
# 4. Security Audit
# ============================================
echo -e "${BLUE}3. Security Audit...${NC}"

if ! command -v composer &> /dev/null; then
    echo -e "${YELLOW}   ⚠️  Composer not found, skipping audit${NC}"
else
    composer audit --no-interaction 2>&1 | tee /tmp/audit-output.txt
    AUDIT_RESULT=${PIPESTATUS[0]}

    if [ $AUDIT_RESULT -ne 0 ]; then
        echo -e "${RED}   ❌ Security vulnerabilities found!${NC}"
        echo ""
        echo "Review and fix vulnerabilities before pushing:"
        echo "  composer audit"
        echo ""

        if [ "$HOOK_LEVEL" = "strict" ]; then
            echo "Update vulnerable dependencies."
            exit 1
        else
            echo -e "${YELLOW}   ⚠️  Continuing with warnings (normal mode)${NC}"
        fi
    else
        echo -e "${GREEN}   ✅ No known vulnerabilities${NC}"
    fi
fi
echo ""

# ============================================
# 5. Check for .only() tests (if using Pest or similar)
# ============================================
echo -e "${BLUE}4. Checking for .only() tests...${NC}"

ONLY_TESTS=$(git grep -n "\.only(" tests/ 2>/dev/null || true)

if [ ! -z "$ONLY_TESTS" ]; then
    echo -e "${RED}   ❌ Found .only() in tests:${NC}"
    echo "$ONLY_TESTS" | sed 's/^/      /'
    echo ""
    echo "Remove .only() from tests before pushing."
    echo "These cause other tests to be skipped."
    echo ""
    exit 1
else
    echo -e "${GREEN}   ✅ No .only() tests found${NC}"
fi
echo ""

# ============================================
# 6. Large Files Check
# ============================================
echo -e "${BLUE}5. Large Files Check...${NC}"

LARGE_FILES=$(git diff --cached --stat | awk '{if ($3 > 1000000) print $1}')

if [ ! -z "$LARGE_FILES" ]; then
    echo -e "${YELLOW}   ⚠️  Large files detected (>1MB):${NC}"
    echo "$LARGE_FILES" | sed 's/^/      /'
    echo ""
    echo "Consider using Git LFS for large files."
    echo ""
else
    echo -e "${GREEN}   ✅ No large files${NC}"
fi
echo ""

# ============================================
# 7. Unpushed Commits Count
# ============================================
echo -e "${BLUE}6. Commits Summary...${NC}"

# Get remote branch
REMOTE_BRANCH=$(git rev-parse --abbrev-ref --symbolic-full-name @{u} 2>/dev/null || echo "")

if [ ! -z "$REMOTE_BRANCH" ]; then
    UNPUSHED_COMMITS=$(git log "$REMOTE_BRANCH"..HEAD --oneline | wc -l)

    echo "   Commits to push: $UNPUSHED_COMMITS"

    if [ $UNPUSHED_COMMITS -gt 10 ]; then
        echo -e "${YELLOW}   ⚠️  Many commits ($UNPUSHED_COMMITS) - consider squashing${NC}"
    fi

    # Show commits
    echo ""
    echo "   Commits:"
    git log "$REMOTE_BRANCH"..HEAD --oneline --max-count=5 | sed 's/^/      /'

    if [ $UNPUSHED_COMMITS -gt 5 ]; then
        echo "      ... and $(($UNPUSHED_COMMITS - 5)) more"
    fi
else
    echo "   New branch (no remote tracking)"
fi
echo ""

# ============================================
# Summary
# ============================================
echo -e "${BLUE}════════════════════════════════════════${NC}"
echo -e "${GREEN}✅ All pre-push checks passed!${NC}"
echo -e "${BLUE}════════════════════════════════════════${NC}"
echo ""
echo "Proceeding with push..."
echo ""

exit 0
